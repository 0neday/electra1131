//
//  electra_objc.m
//  multi_path
//
//  Created by CoolStar on 6/6/18.
//  Copyright Â© 2018 CoolStar. All rights reserved.
//

#include <dlfcn.h>
#include <copyfile.h>
#include <stdio.h>
#include <spawn.h>
#include <unistd.h>
#include <mach/mach.h>
#include <mach-o/dyld.h>
#include <sys/stat.h>
#include <sys/mount.h>
#include <sys/utsname.h>
#import <Foundation/Foundation.h>
#import "NSData+GZip.h"
#import "utils.h"
#import "file_utils.h"
#import "ViewController.h"
#include <CommonCrypto/CommonCrypto.h>

const char* realPath() {
    char path[4096];
    uint32_t size = sizeof(path);
    _NSGetExecutablePath(path, &size);
    char *pt = realpath(path, NULL);
    return pt;
}

const char* progname(const char* prog) {
    NSString *execpath = [[NSString stringWithUTF8String:realPath()] stringByDeletingLastPathComponent];

    NSString *bootstrap = [execpath stringByAppendingPathComponent:[NSString stringWithUTF8String:prog]];
    return [bootstrap UTF8String];
}

void extractGz(const char *from, const char *to) {
    NSData *gz = [NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@(from) ofType:@"gz"]];
    NSData *extracted = [gz gunzippedData];
    int fd = open(to, O_CREAT | O_WRONLY, 0755);
    write(fd, [extracted bytes], [extracted length]);
    close(fd);
}

void update_springboard_plist(){
    NSDictionary *springBoardPlist = [NSMutableDictionary dictionaryWithContentsOfFile:@"/var/mobile/Library/Preferences/com.apple.springboard.plist"];
    [springBoardPlist setValue:@YES forKey:@"SBShowNonDefaultSystemApps"];
    [springBoardPlist writeToFile:@"/var/mobile/Library/Preferences/com.apple.springboard.plist" atomically:YES];
    
    NSDictionary* attr = [NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithShort:0755], NSFilePosixPermissions,@"mobile",NSFileOwnerAccountName,NULL];
    
    NSError *error = nil;
    [[NSFileManager defaultManager] setAttributes:attr ofItemAtPath:@"/var/mobile/Library/Preferences/com.apple.springboard.plist" error:&error];
}

void startDaemons(){    
    pid_t pd;
    
    NSArray *files = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:@"/etc/rc.d" error:nil];
    for (NSString *fileName in files){
        NSString *fullPath = [@"/etc/rc.d" stringByAppendingPathComponent:fileName];
        run([fullPath UTF8String]);
    }
    
    files = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:@"/Library/LaunchDaemons/" error:nil];
    for (NSString *fileName in files){
        if ([fileName isEqualToString:@"jailbreakd.plist"])
            continue;
        if ([fileName isEqualToString:@"com.openssh.sshd.plist"])
            continue;
        
        NSString *fullPath = [@"/Library/LaunchDaemons" stringByAppendingPathComponent:fileName];
        
        posix_spawn(&pd, "/bin/launchctl", NULL, NULL, (char **)&(const char*[]){ "launchctl", "load", [fullPath UTF8String], NULL }, NULL);
        waitpid(pd, NULL, 0);
    }
}

void dumpContentsOfDir(char *path){
    NSArray *files = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:[NSString stringWithUTF8String:path] error:nil];
    NSLog(@"Files at %s: %@", path, files);
}

void dumpContentsOfFile(char *path){
    NSString *fileContents = [NSString stringWithContentsOfFile:[NSString stringWithUTF8String:path] encoding:NSUTF8StringEncoding error:nil];
    NSLog(@"File %s contains: %@", path, fileContents);
}

const char *getSHA256HashOfFile(const char *path) {
    NSData *dataOfFile = [NSData dataWithContentsOfFile:[NSString stringWithUTF8String:path]];
    unsigned char digest[CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(dataOfFile.bytes, (CC_LONG)dataOfFile.length, digest);
    NSMutableString *hashOfFile = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH * 2];
    for(int i = 0; i < CC_SHA256_DIGEST_LENGTH; i++)
    {
        [hashOfFile appendFormat:@"%02x", digest[i]];
    }
    const char *jl = [hashOfFile UTF8String];
    return jl;
}

void checkIntegrity(void) {
    int rv = 0;
#define JAILBREAKDPLISTSHA256 "f40335198d3c6fd7d2ac2cf817d8991d95658f75e1bb3fa74dc2cddb7b428084"
#define BOOTSTRAPTARGZSHA256 "b53eecfcbd376cbc3f7a31c94a80d285692cf1574f84c0c164229419a614a6e0"
#define LAUNCHCTLGZSHA256 "731ead6e5aea656602b8ac72cab90a72a80575f983d1e4da81f06acf51c16505"
#define RMGZSHA256 "ec0398b33cff56a797cba7047c9a1ab9016547c1ebf58b19baa841846f8151ad"
#define TARGZSHA256 "0b4a5f9c0a69721fca132568b4448d623ab4bf881afdb7aeeb146543b92e84d2"
    if (strcmp(getSHA256HashOfFile(progname("jailbreakd.plist")), JAILBREAKDPLISTSHA256) != 0) {
        rv = -1;
    }
    if (strcmp(getSHA256HashOfFile(progname("bootstrap.tar.gz")), BOOTSTRAPTARGZSHA256) != 0) {
        rv = -1;
    }
    if (strcmp(getSHA256HashOfFile(progname("launchctl.gz")), LAUNCHCTLGZSHA256) != 0) {
        rv = -1;
    }
    if (strcmp(getSHA256HashOfFile(progname("rm.gz")), RMGZSHA256) != 0) {
        rv = -1;
    }
    if (strcmp(getSHA256HashOfFile(progname("tar.gz")), TARGZSHA256) != 0) {
        rv = -1;
    }
    if (rv != 0) {
        exit(-1);
    }
}

void checkInjection(void) {
    int rv = 0;
    uint32_t count = _dyld_image_count();
    for (uint32_t i = 0; i < count; i++) {
        const char *dyld = _dyld_get_image_name(i);
        if (strstr(dyld, "MobileSubstrate")) {
            rv = -1;
        }
    }
    NSString *containerPath = [[NSString stringWithUTF8String:realPath()] stringByDeletingLastPathComponent];
    NSArray *files = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:containerPath error:nil];
    for (NSString *fileName in files) {
        NSString *fileExtension = [fileName pathExtension];
        if ([fileExtension isEqualToString:@"dylib"]) {
            rv = -1;
        }
    }
    if (rv != 0) {
        exit(-1);
    }
}

void displaySnapshotNotice(){
    [[ViewController currentViewController] displaySnapshotNotice];
}

void displaySnapshotWarning(){
    [[ViewController currentViewController] displaySnapshotWarning];
}

void removingLiberiOS(){
    [[ViewController currentViewController] removingLiberiOS];
}

void installingCydia(){
    [[ViewController currentViewController] installingCydia];
}

void cydiaDone(){
    [[ViewController currentViewController] cydiaDone];
}
